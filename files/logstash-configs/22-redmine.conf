filter {
  if [type] == "redmine" {
    mutate {
      add_tag => "redmine"
    }
    # Singleton loglines. These are the easiest Redmine events to parse.
    # The multiline events will be handled via "else".
    if [message] =~ "^Migrating" {
      grok {
        # Migrating to AddProjectsFeedsPermissions (30)
        patterns_dir => [ "/etc/logstash/patterns.d" ]
        match => { "message" => "%{REDMINE_MIGRATION}" }
        add_field => { "redmine_action" => "migrate" }
      }
    }
    else if [message] =~ "^Successful authentication" {
      grok {
        # Successful authentication for 'kevin' from 208.70.28.120 at 2015-12-17 20:13:47 UTC
        # Successful authentication for 'conor' from 24.61.12.145 at 2016-01-12 19:30:52 UTC
        # Successful authentication for 'garrettr' from 50.1.125.58 at 2016-01-12 21:46:07 UTC
        # Successful authentication for 'admin' from 50.1.125.58 at 2016-01-26 00:28:16 UTC
        patterns_dir => [ "/etc/logstash/patterns.d" ]
        match => {"message" => "%{REDMINE_SUCCESSFUL_LOGIN}"}
        add_tag => "successful_login"
      }
      date {
        match => ["redmine_auth_timestamp", "yyyy-MM-dd HH:mm:ss"]
      }
    }
    else if [message] =~ "^Failed login" {
      grok {
        # Matches the following examples:
        # Failed login for 'sadaskdhas' from 208.70.28.120 at 2016-01-12 23:23:51 UTC
        # Failed login for 'kevin' from 50.1.125.58 at 2016-01-25 23:03:21 UTC
        patterns_dir => [ "/etc/logstash/patterns.d" ]
        match => { "message" => "%{REDMINE_FAILED_LOGIN}" }
        add_tag => "failed_login"
      }
      date {
        match => ["redmine_auth_timestamp", "yyyy-MM-dd HH:mm:ss"]
      }
    }
    else if [message] =~ "^No public key found" {
      grok {
        # Matches:
        # No public key found for Garrett Robinson <garrett@freedom.press> (3)
        # No public key found for Conor Schaefer <conor@freedom.press> (7)
        patterns_dir => [ "/etc/logstash/patterns.d" ]
        match => {"message" => "%{REDMINE_NO_PUBKEY}" }
        add_tag => "missing_public_key"
      }
    }
    else if [message] =~ "^MailHandler:" {
      grok {
        # matches:
        # MailHandler: received email from kevin@transparencytoolkit.org with Message-ID 56A7F6F1.2050403@transparencytoolkit.org: encrypted=true, valid=false, ignored=true
        # MailHandler: received email from kevingallagher@gmail.com with Message-ID 56A7F7D9.1040807@gmail.com: encrypted=false, valid=false, ignored=true
        patterns_dir => [ "/etc/logstash/patterns.d" ]
        match => {"message" => "%{REDMINE_RECEIVED_MAIL}" }
        add_tag => "email_received"
      }
      grok {
        # matches:
        # MailHandler: ignoring email with Auto-Submitted:auto-replied header
        patterns_dir => [ "/etc/logstash/patterns.d" ]
        match => { message => "%{REDMINE_IGNORED_MAIL}" }
        add_tag => "email_ignored"
      }
      grok {
        # matches:
        # MailHandler: issue #54 created by Anonymous
        patterns_dir => [ "/etc/logstash/patterns.d" ]
        match => { message => "%{REDMINE_ISSUE_CREATED}" }
        add_tag => "issue_created"
      }
      grok {
        # matches:
        # MailHandler: an unexpected error occurred when receiving email: Decryption failed
        patterns_dir => [ "/etc/logstash/patterns.d" ]
        match => { message => "%{REDMINE_FAILED_DECRYPT}" }
        add_tag => "failed_decrypt"
        add_tag => "slack_alert"
      }
    }

    else {
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d" ]
        match => { "message" => "%{REDMINE_REQUEST_STARTED}" }
        add_tag => "multiline_event_start"
      }
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d" ]
        match => {"message" => "%{REDMINE_PLUGIN_INFO}" }
        add_tag => "resource_request"
      }
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d" ]
        match => { "message" => "%{REDMINE_CURRENT_USER}" }
      }
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d" ]
        match => { "message" => "%{REDMINE_RENDER}" }
        add_tag => "render"
      }
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d" ]
        match => { "message" => "%{REDMINE_REDIRECT}" }
        add_tag => "redirect"
      }
      grok {
        patterns_dir => [ "/etc/logstash/patterns.d" ]
        match => { "message" => "%{REDMINE_REQUEST_COMPLETED}" }
        add_tag => "request_completed"
      }

      if "render" in [tags] {
        ruby {
          # Ungodly ruby code to create a list of the "Rendered" lines and store as array.
          code => 'event["resources"] = event["message"].split("\n")[1..-1].select { |r| /^\s*Rendered/ =~ r }.map { |r| r.gsub!(/^\s*/, "") }'
        }
        mutate {
          remove_tag => "_grokparsefailure"
        }
      }
    }
    if [src_ip] {
      geoip {
        source => "src_ip"
        target => "geoip"
        add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
        add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
      }
    }
    if [redmine_timestamp] {
      date {
        match => ["redmine_timestamp", "yyyy-MM-dd HH:mm:ss Z"]
      }
    }
  }
}
